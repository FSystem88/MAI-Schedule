# -*- coding: utf8 -*-


'''
Copyright (c) 2017 Anischenko Konstantin Maximovich

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''


import re
import dates
import config
import telebot
import db_manage


bot = telebot.TeleBot(config.TOKEN)


# DEL
@bot.message_handler(commands=['rnd'])
def rnd(message):
    bot.send_message(message.chat.id, db.rnd())


@bot.message_handler(commands=['start'])
def start(message):
    check = db.check_id(message.chat.id)

    if check is None:
        db.insert_user(message.chat.id, message.chat.username)
        group = None
    else:
        group = db.get_group(message.chat.id)

    if group is None:
        change_group_pre(message)
        return
    else:
        bot.send_message(message.chat.id, config.already_registered)
        help(message)
        return


@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥')
def help_redirect(message):
    help(message)
    return


@bot.message_handler(commands=['help'])
def help(message):
    markup = telebot.types.ReplyKeyboardMarkup()
    markup.row('–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞', '–°–ª–µ–¥—É—é—â–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è')
    markup.row('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π', '–°–µ—Å—Å–∏—è')
    markup.row('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–û –Ω–∞—Å')
    bot.send_message(message.chat.id,
                     '–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?', reply_markup=markup)


def scheldule_prettify(scheldule):
    if scheldule == []:
        return '–°–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç—É'
    else:
        bot_message = ''
        location = 'üìç ' + scheldule[-1] + '\n'
        if '–ö–∞—Ñ–µ–¥—Ä–∞' in scheldule[-2]:
            teacher = ''
        else:
            teacher = 'üë§ ' + scheldule[-2] + '\n'
        subject = 'üìù ' + scheldule[-3] + '\n'

        for elem in scheldule:
            if re.match(r'\d{2}:\d{2}', elem):
                time = '‚åö ' + elem + '\n'
            if re.match(r'\d{2}[.]\d{2}', elem):
                date = elem
                week_day = ''
                if len(date) > 5:
                    week_day = date[5:]
                    date = date[:5] + ' '
                    bot_message += '=== ' + date +\
                                   dates.day_full_name(week_day) +\
                                   ' ===' + '\n'
        bot_message += teacher + subject + time + location + '\n'
        return bot_message


@bot.message_handler(func=lambda message:
                     message.text == '–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞')
def next_less(message):
    week_type = dates.get_current_week_type()
    week_day = dates.get_today_week_day()
    group = db.get_group(message.chat.id)
    scheldule = db.get_day_scheldule(group, week_type, week_day)
    for lesson in scheldule:
        lesson_time = lesson[1][:5]
        if dates.time_diff(lesson_time) is not None:
            chat_message = '=== ' + dates.day_full_name(week_day) +\
                               ' ===' + '\n'
            chat_message += scheldule_prettify(lesson)
            bot.send_message(message.chat.id, chat_message)
            return

    week_day = dates.get_next_week_day(week_day)
    if week_day == '–ü–Ω':
        week_type = dates.get_next_week_type()
    scheldule = db.get_day_scheldule(group, week_type, week_day)

    TWO_WEEKS = 14
    for i in range(TWO_WEEKS):
        week_day = dates.get_next_week_day(week_day)
        if week_day == '–ü–Ω':
            week_type = dates.get_next_week_type()
        scheldule = db.get_day_scheldule(group, week_type, week_day)
        if scheldule != []:
            chat_message = '=== ' + dates.day_full_name(week_day) +\
                               ' ===' + '\n'
            chat_message += scheldule_prettify(scheldule[0])
            bot.send_message(message.chat.id, chat_message)
            return
    bot.send_message(message.chat.id, config.dat_scheldule_empty)


@bot.message_handler(func=lambda message:
                     message.text == '–°–ª–µ–¥—É—é—â–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è')
def next_lab(message):
    week_type = dates.get_current_week_type()
    week_day = dates.get_today_week_day()
    group = db.get_group(message.chat.id)
    scheldule = db.get_day_scheldule(group, week_type, week_day)
    for lesson in scheldule:
        lesson_time = lesson[1][:5]
        if lesson[2] == '–õ–†' and dates.time_diff(lesson_time) is not None:
                chat_message = '=== ' + dates.day_full_name(week_day) +\
                               ' ===' + '\n'
                chat_message += scheldule_prettify(lesson)
                bot.send_message(message.chat.id, chat_message)
                return

    # –ï—Å–ª–∏ –≤ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ –Ω–∞ –Ω–∞–π–¥–µ–Ω–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∏—Å–∫—É
    # –ü–æ –≤—Å–µ–º –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –¥–Ω—è–º
    two_weeks = 14
    for i in range(two_weeks):
        week_day = dates.get_next_week_day(week_day)
        if week_day == '–ü–Ω':
            week_type = dates.get_next_week_type()
        scheldule = db.get_day_scheldule(group, week_type, week_day)
        for lesson in scheldule:
            if lesson[2] == '–õ–†':
                chat_message = '=== ' + dates.day_full_name(week_day) +\
                               ' ===' + '\n'
                chat_message += scheldule_prettify(lesson)
                bot.send_message(message.chat.id, chat_message)
                return
    bot.send_message(message.chat.id, config.laboratory_empty)


@bot.message_handler(func=lambda message:
                     message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π')
def get_schedule(message):
    markup = telebot.types.ReplyKeyboardMarkup()
    markup.row('–ù–∞ —Å–µ–≥–æ–¥–Ω—è', '–ù–∞ –∑–∞–≤—Ç—Ä–∞')
    markup.row('–ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é', '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é')
    markup.row('–ù–∞–∑–∞–¥')
    bot.send_message(message.chat.id,
                     '–ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=markup)


@bot.message_handler(func=lambda message:
                     message.text == '–ù–∞ —Å–µ–≥–æ–¥–Ω—è')
def today_scheldule(message):
    week_type = dates.get_current_week_type()
    week_day = dates.get_today_week_day()
    group = db.get_group(message.chat.id)
    scheldule = db.get_day_scheldule(group, week_type, week_day)
    if scheldule == []:
        bot.send_message(message.chat.id, '–°–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç')
    else:
        chat_message = '=== ' + dates.day_full_name(week_day) + ' ===' + '\n'
        for lesson in scheldule:
            chat_message += scheldule_prettify(lesson)
        bot.send_message(message.chat.id, chat_message)


@bot.message_handler(func=lambda message:
                     message.text == '–ù–∞ –∑–∞–≤—Ç—Ä–∞')
def tomorrow_scheldule(message):
    week_day = dates.get_tomorrow_week_day()
    if week_day == '–ü–Ω':
        week_type = dates.get_next_week_type()
    else:
        week_type = dates.get_current_week_type()
    group = db.get_group(message.chat.id)
    scheldule = db.get_day_scheldule(group, week_type, week_day)
    if scheldule == []:
        bot.send_message(message.chat.id, '–ó–∞–≤—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç')
    else:
        chat_message = '=== ' + dates.day_full_name(week_day) + ' ===' + '\n'
        for lesson in scheldule:
            chat_message += scheldule_prettify(lesson)
        bot.send_message(message.chat.id, chat_message)


@bot.message_handler(func=lambda message:
                     message.text == '–ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é')
def current_week_scheldule(message):
    week_type = dates.get_current_week_type()
    group = db.get_group(message.chat.id)
    scheldule = db.get_week_scheldule(group, week_type)
    if scheldule == []:
        bot.send_message(message.chat.id, config.week_scheldule_empty)
    else:
        current_week_day = '–ü–Ω'
        chat_message = '=== ' + current_week_day + ' ===' + '\n'
        for lesson in scheldule:
            if lesson[0] != current_week_day:
                current_week_day = lesson[0]
                chat_message += '=== ' + current_week_day + ' ===' + '\n'
            chat_message += scheldule_prettify(lesson)
        bot.send_message(message.chat.id, chat_message)


@bot.message_handler(func=lambda message:
                     message.text == '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é')
def next_week_scheldule(message):
    week_type = dates.get_next_week_type()
    group = db.get_group(message.chat.id)
    scheldule = db.get_week_scheldule(group, week_type)
    if scheldule == []:
        bot.send_message(message.chat.id, config.week_scheldule_empty)
    else:
        current_week_day = '–ü–Ω'
        chat_message = '=== ' + current_week_day + ' ===' + '\n'
        for lesson in scheldule:
            if lesson[0] != current_week_day:
                current_week_day = lesson[0]
                chat_message += '=== ' + current_week_day + ' ===' + '\n'
            chat_message += scheldule_prettify(lesson)
        bot.send_message(message.chat.id, chat_message)


@bot.message_handler(func=lambda message:
                     message.text == '–°–µ—Å—Å–∏—è')
def session(message):
    markup = telebot.types.ReplyKeyboardMarkup()
    markup.row('–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ —Å–µ—Å—Å–∏–∏?', '–ë–ª–∏–∂–∞–π—à–∏–π —ç–∫–∑–∞–º–µ–Ω')
    markup.row('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏', '–ù–∞–ø–æ–º–Ω–∏ –ø—Ä–æ —ç–∫–∑–∞–º–µ–Ω')
    markup.row('–ù–∞–∑–∞–¥')
    bot.send_message(message.chat.id,
                     '–ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=markup)


@bot.message_handler(func=lambda message:
                     message.text == '–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ —Å–µ—Å—Å–∏–∏?')
def remaining_days(message):
    chat_message = '–î–æ —Å–µ—Å—Å–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {} –¥–Ω–µ–π'.format(
        dates.time_left_before_session())
    bot.send_message(message.chat.id, chat_message)


@bot.message_handler(func=lambda message: message.text == '–ë–ª–∏–∂–∞–π—à–∏–π —ç–∫–∑–∞–º–µ–Ω')
def nearest_exam(message):
    group = db.get_group(message.chat.id)
    session_scheldule = db.get_session(group)
    if session_scheldule is None:
        bot.send_message(message.chat.id, config.session_empty)
        return
    for exam in session_scheldule:
        exam_date = exam[0][:5]
        if dates.date_diff(exam_date) is not None:
            bot.send_message(message.chat.id, scheldule_prettify(exam))
            return
    bot.send_message(message.chat.id, '–ö–∞–∂–µ—Ç—Å—è —Å–µ—Å—Å–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å')


@bot.message_handler(func=lambda message: message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏')
def exam_scheldule(message):
    group = db.get_group(message.chat.id)
    session_scheldule = db.get_session(group)
    if session_scheldule is None:
        bot.send_message(message.chat.id, config.session_empty)
        return
    for exam in session_scheldule:
        bot.send_message(message.chat.id, scheldule_prettify(exam))


@bot.message_handler(func=lambda message:
                     message.text == '–ù–∞–ø–æ–º–Ω–∏ –ø—Ä–æ —ç–∫–∑–∞–º–µ–Ω')
def exam_remind(message):
    bot.send_message(message.chat.id, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')


@bot.message_handler(func=lambda message: message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
def settings_redirect(message):
    settings(message)
    return


@bot.message_handler(commands=['settings'])
def settings(message):
    markup = telebot.types.ReplyKeyboardMarkup()
    markup.row('üìù –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')
    markup.row('üìü –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è')
    markup.row('‚ùå –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
    markup.row('–ù–∞–∑–∞–¥')
    bot.send_message(message.chat.id, '–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫', reply_markup=markup)


@bot.message_handler(func=lambda message:
                     message.text == 'üìù –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')
def change_group_pre(message):
    group = db.get_group(message.chat.id)
    bot.send_message(message.chat.id, '–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞: ' + group)
    message = bot.send_message(message.chat.id, config.get_group)
    bot.register_next_step_handler(message, change_group_post)


def change_group_post(message):
    group = message.text.upper()
    groups_list = []
    groups_list.append(group)

    if message.text == '–ù–∞–∑–∞–¥':
        help(message)
        return

    # –ú–Ω–æ–≥–∏–µ –≤–≤–æ–¥—è—Ç –≤–º–µ—Å—Ç–æ –û - 0
    # –î–∞–Ω–Ω—ã–π —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã,
    # –≥–¥–µ –∑–∞–º–µ—Å—Ç–æ –Ω—É–ª—è —Å—Ç–∞–≤–∏—Ç—Å—è –±—É–∫–≤–∞ –û
    for i in range(group.count('0')):
        group = groups_list[-1][:groups_list[-1].index('0')] + '–û' +\
                          groups_list[-1][groups_list[-1].index('0') + 1:]
        groups_list.append(group)

    for group in groups_list:
        if group in db.groups:
            db.update_group(message.chat.id, group)
            bot.send_message(message.chat.id, config.completed)
            help(message)
            return

    bot.send_message(message.chat.id, '–í—ã –≥–¥–µ-—Ç–æ –æ—à–∏–±–ª–∏—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    bot.register_next_step_handler(message, change_group_post)
    return


@bot.message_handler(func=lambda message:
                     message.text == 'üìü –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è')
def edit_alerts(message):
    bot.send_message(message.chat.id, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')


@bot.message_handler(func=lambda message:
                     message.text == '‚ùå –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
def drop_settings(message):
    markup = telebot.types.ReplyKeyboardMarkup()
    markup.row('üî• –î–∞', 'üö´ –ù–µ—Ç')
    bot.send_message(message.chat.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=markup)
    bot.register_next_step_handler(message, drop_check)


def drop_check(message):
    if message.text == 'üî• –î–∞':
        db.update_group(message.chat.id, None)
    settings(message)


@bot.message_handler(func=lambda message:
                     message.text == '–û –Ω–∞—Å')
def about(message):
    bot.send_message(message.chat.id, config.contacts)


if __name__ == '__main__':
    db = db_manage.Database(config.DB_NAME)
    bot.polling(none_stop=True)
