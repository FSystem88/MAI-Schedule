# -*- coding: utf8 -*-

# Copyright (c) 2017 Anischenko Konstantin Maximovich

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
–ì–ª–∞–≤–Ω—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª.
–î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª secret_settings.py –≤ —Ç–æ–π –∂–µ
–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª. –í secret_settings.py
–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å 2 —Å—Ç—Ä–æ—á–∫–∏
TOKEN = –í–∞—à —Ç–æ–∫–µ–Ω
DB_NAME = –∏–º—è –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä bot.sqlite3

–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π;
–∏–∑ db_manage –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∞—Å—Å Database –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–¥
–∏–∑ dates –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º

"""

import re
import telebot
import db_manage
import config
import dates
import secret_settings

bot = telebot.TeleBot(secret_settings.TOKEN)


@bot.message_handler(commands=['start'])
def start(message):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ.

    –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    –ï—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç–æ –≤ –±–¥ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Å –µ–≥–æ –∏–º–µ–Ω–µ–º, –ø–æ—Å–ª–µ —á–µ–≥–æ
    –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è change_group_start(), –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –≤–≤–æ–¥ –≥—Ä—É–ø–ø—ã
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ï—Å–ª–∏ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ—Ç –≥—Ä—É–ø–ø—ã, —Ç–æ —Ç–∞–∫–∂–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
    —Ñ—É–Ω–∫—Ü–∏—è change_group_start().

    –ò–Ω–∞—á–µ, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.

    """
    check = db.check_id(message.chat.id)

    if check is None:
        db.insert_user(message.chat.id, message.chat.username)
        group = None
    else:
        group = db.get_group(message.chat.id)

    if group is None:
        change_group_start(message)
        return
    else:
        bot.send_message(message.chat.id, config.already_registered)
        help(message)
        return


@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥')
def help_redirect(message):
    """–§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    help(message)
    return


@bot.message_handler(commands=['help'])
def help(message):
    """–§—É–Ω–∫—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    markup = telebot.types.ReplyKeyboardMarkup()
    markup.row('–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞', '–°–ª–µ–¥—É—é—â–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è')
    markup.row('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π', '–°–µ—Å—Å–∏—è')
    markup.row('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–û –Ω–∞—Å')
    bot.send_message(message.chat.id,
                     '–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?', reply_markup=markup)


def schedule_prettify(schedule):
    """ –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –ª–∏—Å—Ç —Å –∑–∞–Ω—è—Ç–∏—è–º–∏, –ø–æ—Å–ª–µ —á–µ–≥–æ
    —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π, –ª–∏–±–æ –∑–∞–≤–µ–¥–æ–º–æ –∑–Ω–∞—è
    –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ—Ç –∏—Ö –∏
    –æ—Ñ–æ—Ä–º–ª—è–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞—è –ª–∏—Å—Ç —Å –∑–∞–Ω—è—Ç–∏—è–º–∏.

    """
    if not schedule:
        return '–°–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç—É'
    else:
        bot_message = ''
        location = 'üìç ' + schedule[-1] + '\n'
        if '–ö–∞—Ñ–µ–¥—Ä–∞' in schedule[-2]:
            teacher = ''
        elif schedule[-2] != '':
            teacher = 'üë§ ' + schedule[-2] + '\n'
        else:
            teacher = ''
        subject = 'üìù ' + schedule[-3] + '\n'

        for elem in schedule:

            if re.match(r'\d{2}:\d{2}', elem):
                time = '‚åö ' + elem + '\n'
            else:
                time = ''

            if re.match(r'\d{2}[.]\d{2}', elem):
                date = elem
                if len(date) > 5:
                    week_day = date[5:]
                    date = date[:5] + ' '
                    bot_message += '=== ' + date +\
                                   dates.day_full_name(week_day) +\
                                   ' ===' + '\n'
        bot_message += teacher + subject + time + location + '\n'
        return bot_message


@bot.message_handler(func=lambda message:
                     message.text == '–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞')
def get_next_lesson(message):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –≤—ã–≤–æ–¥ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –∫–∞–∂–¥–æ–µ –∑–∞–Ω—è—Ç–∏–µ –∏–∑ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è, –Ω–∞—á–∞–ª–æ—Å—å –ª–∏ –æ–Ω–æ,
    –µ—Å–ª–∏ –∑–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å, —Ç–æ –æ–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–∏–π –Ω–∞
    –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏.  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –≤—Å—Ç—Ä–µ—á–µ–Ω–Ω–æ–µ
    –∑–∞–Ω—è—Ç–∏–µ.

    –ï—Å–ª–∏ –Ω–µ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π, —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –æ–± —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """

    if dates.holiday_check():
        bot.send_message(message.chat.id, config.holiday)
        return

    week_type = dates.get_current_week_type()
    week_day = dates.get_today_week_day()
    group = db.get_group(message.chat.id)
    schedule = db.get_day_schedule(group, week_type, week_day)

    for lesson in schedule:
        lesson_time = lesson[1][:5]
        if dates.time_diff(lesson_time) is not None:
            chat_message = '=== ' + dates.day_full_name(week_day) +\
                               ' ===' + '\n'
            chat_message += schedule_prettify(lesson)
            bot.send_message(message.chat.id, chat_message)
            return

    TWO_WEEKS = 14
    for i in range(TWO_WEEKS):
        week_day = dates.get_next_week_day(week_day)
        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, —Ç–æ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞
        # –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –∏–∑–º–µ–Ω–∏—Ç—Å—è —Ç–∏–ø –Ω–µ–¥–µ–ª–∏.
        if week_day == '–ü–Ω':
            week_type = dates.get_next_week_type()
        schedule = db.get_day_schedule(group, week_type, week_day)
        # –ï—Å–ª–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –µ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è,
        # —Ç–æ –≤—ã–≤–æ–¥–∏—Ç –ø–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
        if schedule:
            chat_message = '=== ' + dates.day_full_name(week_day) +\
                               ' ===' + '\n'
            chat_message += schedule_prettify(schedule[0])
            bot.send_message(message.chat.id, chat_message)
            return
    bot.send_message(message.chat.id, config.day_schedule_empty)


@bot.message_handler(func=lambda message:
                     message.text == '–°–ª–µ–¥—É—é—â–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è')
def get_next_laboratory(message):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –≤—ã–≤–æ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –∫–∞–∂–¥–æ–µ –∑–∞–Ω—è—Ç–∏–µ –∏–∑ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è, –Ω–∞—á–∞–ª–æ—Å—å –ª–∏ –æ–Ω–æ –∏
    —è–ª–≤—è–µ—Ç—Å—è –ª–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π, –µ—Å–ª–∏ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å –∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è, —Ç–æ
    –æ–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥
    –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è.

    –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 2 –Ω–µ–¥–µ–ª–∏. –ï—Å–ª–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã, —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    –ø–æ–ª—É—á–∏—Ç –æ–± —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.

    """
    if dates.holiday_check():
        bot.send_message(message.chat.id, config.holiday)
        return

    week_type = dates.get_current_week_type()
    week_day = dates.get_today_week_day()
    group = db.get_group(message.chat.id)
    schedule = db.get_day_schedule(group, week_type, week_day)
    for lesson in schedule:
        lesson_time = lesson[1][:5]
        if lesson[2] == '–õ–†' and dates.time_diff(lesson_time) is not None:
                chat_message = '=== ' + dates.day_full_name(week_day) +\
                               ' ===' + '\n'
                chat_message += schedule_prettify(lesson)
                bot.send_message(message.chat.id, chat_message)
                return

    # –ï—Å–ª–∏ –≤ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ –Ω–∞ –Ω–∞–π–¥–µ–Ω–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∏—Å–∫—É
    # –ø–æ –≤—Å–µ–º –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –¥–Ω—è–º.
    TWO_WEEKS = 14
    for i in range(TWO_WEEKS):
        week_day = dates.get_next_week_day(week_day)
        if week_day == '–ü–Ω':
            week_type = dates.get_next_week_type()
        schedule = db.get_day_schedule(group, week_type, week_day)
        for lesson in schedule:
            if lesson[2] == '–õ–†':
                chat_message = '=== ' + dates.day_full_name(week_day) +\
                               ' ===' + '\n'
                chat_message += schedule_prettify(lesson)
                bot.send_message(message.chat.id, chat_message)
                return
    bot.send_message(message.chat.id, config.laboratory_empty)


@bot.message_handler(func=lambda message:
                     message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π')
def get_schedule(message):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞—é—â–∞—è, –∑–∞ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    markup = telebot.types.ReplyKeyboardMarkup()
    markup.row('–ù–∞ —Å–µ–≥–æ–¥–Ω—è', '–ù–∞ –∑–∞–≤—Ç—Ä–∞')
    markup.row('–ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é', '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é')
    markup.row('–ù–∞–∑–∞–¥')
    bot.send_message(message.chat.id,
                     '–ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=markup)


@bot.message_handler(func=lambda message:
                     message.text == '–ù–∞ —Å–µ–≥–æ–¥–Ω—è')
def get_today_schedule(message):
    """–í—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.

    –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç—É, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –ò–Ω–∞—á–µ, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.

    """
    if dates.holiday_check():
        bot.send_message(message.chat.id, config.holiday)
        return
    week_type = dates.get_current_week_type()
    week_day = dates.get_today_week_day()
    group = db.get_group(message.chat.id)
    schedule = db.get_day_schedule(group, week_type, week_day)
    if not schedule:
        bot.send_message(message.chat.id, '–°–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç')
    else:
        chat_message = '=== ' + dates.day_full_name(week_day) + ' ===' + '\n'
        for lesson in schedule:
            chat_message += schedule_prettify(lesson)
        bot.send_message(message.chat.id, chat_message)


@bot.message_handler(func=lambda message:
                     message.text == '–ù–∞ –∑–∞–≤—Ç—Ä–∞')
def get_tomorrow_schedule(message):
    """–í—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞.

    –ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç—É, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –ò–Ω–∞—á–µ, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.

    """
    if dates.holiday_check():
        bot.send_message(message.chat.id, config.holiday)
        return
    week_day = dates.get_tomorrow_week_day()
    if week_day == '–ü–Ω':
        week_type = dates.get_next_week_type()
    else:
        week_type = dates.get_current_week_type()
    group = db.get_group(message.chat.id)
    schedule = db.get_day_schedule(group, week_type, week_day)
    if not schedule:
        bot.send_message(message.chat.id, '–ó–∞–≤—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç')
    else:
        chat_message = '=== ' + dates.day_full_name(week_day) + ' ===' + '\n'
        for lesson in schedule:
            chat_message += schedule_prettify(lesson)
        bot.send_message(message.chat.id, chat_message)


@bot.message_handler(func=lambda message:
                     message.text == '–ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é')
def get_current_week_schedule(message):
    """–í—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é.

    –ï—Å–ª–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç—É, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –ò–Ω–∞—á–µ, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é.

    """
    if dates.holiday_check():
        bot.send_message(message.chat.id, config.holiday)
        return
    week_type = dates.get_current_week_type()
    group = db.get_group(message.chat.id)
    schedule = db.get_week_schedule(group, week_type)
    if not schedule:
        bot.send_message(message.chat.id, config.week_schedule_empty)
    else:
        current_week_day = '–ü–Ω'
        chat_message = '=== ' + current_week_day + ' ===' + '\n'
        for lesson in schedule:
            if lesson[0] != current_week_day:
                current_week_day = lesson[0]
                chat_message += '=== ' + current_week_day + ' ===' + '\n'
            chat_message += schedule_prettify(lesson)
        bot.send_message(message.chat.id, chat_message)


@bot.message_handler(func=lambda message:
                     message.text == '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é')
def get_next_week_schedule(message):
    """–í—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é.

    –ï—Å–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç—É, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –ò–Ω–∞—á–µ, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é.

    """
    if dates.holiday_check():
        bot.send_message(message.chat.id, config.holiday)
        return
    week_type = dates.get_next_week_type()
    group = db.get_group(message.chat.id)
    schedule = db.get_week_schedule(group, week_type)
    if not schedule:
        bot.send_message(message.chat.id, config.week_schedule_empty)
    else:
        current_week_day = '–ü–Ω'
        chat_message = '=== ' + current_week_day + ' ===' + '\n'
        for lesson in schedule:
            if lesson[0] != current_week_day:
                current_week_day = lesson[0]
                chat_message += '=== ' + current_week_day + ' ===' + '\n'
            chat_message += schedule_prettify(lesson)
        bot.send_message(message.chat.id, chat_message)


@bot.message_handler(func=lambda message:
                     message.text == '–°–µ—Å—Å–∏—è')
def session(message):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –º–µ–Ω—é —Å–µ—Å—Å–∏–∏."""
    markup = telebot.types.ReplyKeyboardMarkup()
    markup.row('–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ —Å–µ—Å—Å–∏–∏?', '–ë–ª–∏–∂–∞–π—à–∏–π —ç–∫–∑–∞–º–µ–Ω')
    markup.row('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏', '–ù–∞–ø–æ–º–Ω–∏ –ø—Ä–æ —ç–∫–∑–∞–º–µ–Ω')
    markup.row('–ù–∞–∑–∞–¥')
    bot.send_message(message.chat.id,
                     '–ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=markup)


@bot.message_handler(func=lambda message:
                     message.text == '–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ —Å–µ—Å—Å–∏–∏?')
def remaining_days(message):
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–µ –¥–Ω–µ–π –¥–æ —Å–µ—Å—Å–∏–∏"""
    chat_message = '–î–æ —Å–µ—Å—Å–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {} –¥–Ω–µ–π'.format(
        dates.time_left_before_session())
    bot.send_message(message.chat.id, chat_message)


@bot.message_handler(func=lambda message: message.text == '–ë–ª–∏–∂–∞–π—à–∏–π —ç–∫–∑–∞–º–µ–Ω')
def get_nearest_exam(message):
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–∏–∂–∞–π—à–µ–º —ç–∫–∑–∞–º–µ–Ω–µ.

    –ü—Ä–æ–≤–µ—Ä—è—Ç–µ—Å—è –¥–∞—Ç–∞ –∫–∞–∂–¥–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞. –ï—Å–ª–∏ –æ–Ω –ø—Ä–æ—à–µ–ª
    (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ dates.date_diff()),
    —Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.
    –ï—Å–ª–∏ –±—ã–ª –Ω–∞–π–¥–µ–Ω —ç–∫–∑–∞–º–µ–Ω, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ–¥ —É—Å–ª–æ–≤–∏–µ, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è.
    –ò–Ω–∞—á–µ, –≤—ã–≤–æ–¥–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.

    """
    group = db.get_group(message.chat.id)
    session_schedule = db.get_session(group)
    if session_schedule is None:
        bot.send_message(message.chat.id, config.session_empty)
        return
    for exam in session_schedule:
        exam_date = exam[0][:5]
        if dates.date_diff(exam_date) is not None:
            bot.send_message(message.chat.id, schedule_prettify(exam))
            return
    bot.send_message(message.chat.id, '–ö–∞–∂–µ—Ç—Å—è, —Å–µ—Å—Å–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å')


@bot.message_handler(func=lambda message: message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏')
def get_exam_schedule(message):
    """–í—ã–≤–æ–¥ –≤—Å–µ—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤.

    –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —ç–∫–∑–∞–º–µ–Ω–æ–≤ –ø—É—Å—Ç, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–º.

    """
    group = db.get_group(message.chat.id)
    session_schedule = db.get_session(group)
    if session_schedule is None:
        bot.send_message(message.chat.id, config.session_empty)
        return
    for exam in session_schedule:
        bot.send_message(message.chat.id, schedule_prettify(exam))


@bot.message_handler(func=lambda message:
                     message.text == '–ù–∞–ø–æ–º–Ω–∏ –ø—Ä–æ —ç–∫–∑–∞–º–µ–Ω')
def exam_remind(message):
    bot.send_message(message.chat.id, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')


@bot.message_handler(func=lambda message: message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
def settings_redirect(message):
    """–í—ã–∑–æ–≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    settings(message)
    return


@bot.message_handler(commands=['settings'])
def settings(message):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    markup = telebot.types.ReplyKeyboardMarkup()
    markup.row('üìù –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')
    markup.row('üìü –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è')
    markup.row('‚ùå –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
    markup.row('–ù–∞–∑–∞–¥')
    bot.send_message(message.chat.id, '–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫', reply_markup=markup)


@bot.message_handler(func=lambda message:
                     message.text == 'üìù –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')
def change_group_start(message):
    """–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã.

    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üìù –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    –ø–æ–ª—É—á–∏—Ç —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É (–µ—Å–ª–∏ –µ—Å—Ç—å).
    –ü–æ—Å–ª–µ —á–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –∏–ª–∏
    –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥.

    """
    group = db.get_group(message.chat.id)
    if group is not None:
        bot.send_message(message.chat.id, '–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞: ' + group)
    message = bot.send_message(message.chat.id, config.get_group)
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ handler'a. –¢.–µ. –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π change_group_post
    bot.register_next_step_handler(message, change_group_end)


def change_group_end(message):
    """ –í–≤–æ–¥ –≥—Ä—É–ø–ø—ã.

    –§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≥—Ä—É–ø–ø, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –∏–∑ —Å–ø–∏—Å–∫–∞, –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –≤ —Å–ø–∏—Å–∫–µ –≥—Ä—É–ø–ø.
    –ï—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å, —Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å –±–¥. –ò–Ω–∞—á–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π –≥—Ä—É–ø–ø–µ.

    –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, —Ç–æ –≤—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
    –æ —Ç–æ–º, —á—Ç–æ –æ–Ω –æ—à–∏–±—Å—è –ø—Ä–∏ –≤–≤–æ–¥–µ.

    """
    try:
        group = message.text.upper()
        groups_list = [group]

        if message.text == '–ù–∞–∑–∞–¥':
            help(message)
            return

        # –ú–Ω–æ–≥–∏–µ –≤–≤–æ–¥—è—Ç –≤–º–µ—Å—Ç–æ –û - 0
        # –î–∞–Ω–Ω—ã–π —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã,
        # –≥–¥–µ –∑–∞–º–µ—Å—Ç–æ –Ω—É–ª—è —Å—Ç–∞–≤–∏—Ç—Å—è –±—É–∫–≤–∞ –û
        for i in range(group.count('0')):
            group = groups_list[-1][:groups_list[-1].index('0')] + '–û' +\
                              groups_list[-1][groups_list[-1].index('0') + 1:]
            groups_list.append(group)

        def _strings_correction(strings_list, pattern, correct_pattern):
            """–ó–∞–º–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∏ - pattern –Ω–∞ —Å—Ç—Ä–æ–∫—É - correct_pattern."""
            pattern = re.compile(pattern)
            for i in range(len(strings_list)):
                strings_list[i] = pattern.sub(correct_pattern, strings_list[i])
            return list

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–≤–æ–¥–∏—Ç—Å—è –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, –Ω–æ
        # –µ—Å–ª–∏ —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≥—Ä—É–ø–ø —Ä—è–¥ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, –ø–æ—ç—Ç–æ–º—É,
        # –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Ö –∏–∑–º–µ–Ω–∏—Ç—å.
        for key in config.EXCEPT_SYMBS:
            if key in group:
                groups_list = _strings_correction(groups_list, key, config.EXCEPT_SYMBS[key])

        for group in groups_list:
            if group in db.groups:
                db.update_group(message.chat.id, group)
                bot.send_message(message.chat.id, config.completed)
                help(message)
                return

        bot.send_message(message.chat.id, '–í—ã –≥–¥–µ-—Ç–æ –æ—à–∏–±–ª–∏—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(message, change_group_end())
        return
    except Exception:
        bot.send_message(message.chat.id, config.something_going_wrong)


@bot.message_handler(func=lambda message:
                     message.text == 'üìü –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è')
def edit_alerts(message):
    bot.send_message(message.chat.id, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')


@bot.message_handler(func=lambda message:
                     message.text == '‚ùå –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
def drop_settings(message):
    """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    markup = telebot.types.ReplyKeyboardMarkup()
    markup.row('üî• –î–∞', 'üö´ –ù–µ—Ç')
    bot.send_message(message.chat.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=markup)
    bot.register_next_step_handler(message, drop_check)


def drop_check(message):
    if message.text == 'üî• –î–∞':
        db.update_group(message.chat.id, None)
    settings(message)


@bot.message_handler(func=lambda message:
                     message.text == '–û –Ω–∞—Å')
def about(message):
    bot.send_message(message.chat.id, config.contacts)


if __name__ == '__main__':
    db = db_manage.Database(secret_settings.DB_NAME)
    bot.polling(none_stop=True)
